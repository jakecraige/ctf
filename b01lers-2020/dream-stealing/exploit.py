#!/usr/bin/env python3
from Crypto.PublicKey import RSA
from pwn import *

n = int(98570307780590287344989641660271563150943084591122129236101184963953890610515286342182643236514124325672053304374355281945455993001454145469449640602102808287018619896494144221889411960418829067000944408910977857246549239617540588105788633268030690222998939690024329717050066864773464183557939988832150357227)
p_or_q = int(9695477612097814143634685975895486365012211256067236988184151482923787800058653259439240377630508988251817608592320391742708529901158658812320088090921919)
e = int(65537)
ct = int(75665489286663825011389014693118717144564492910496517817351278852753259053052732535663285501814281678158913989615919776491777945945627147232073116295758400365665526264438202825171012874266519752207522580833300789271016065464767771248100896706714555420620455039240658817899104768781122292162714745754316687483)

def lcm(a, b):
    x = abs(a*b)
    y = math.gcd(int(a), int(b))
    return int(x // y)

def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
    gcd = b
    return gcd, x, y

def modinv(x, m):
    gcd, x, y = egcd(x, m)
    return x

def int_to_bytes(x: int) -> bytes:
    return x.to_bytes((x.bit_length() + 7) // 8, 'big')

q_or_p = int(n // p_or_q)
tot = lcm(p_or_q-1, q_or_p-1)
d = modinv(e, tot)

pt = pow(ct, d, n)
print(int_to_bytes(pt))
