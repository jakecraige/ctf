from pwn import *
from collections import Counter

CIPHERTEXTS_FILE = "./ciphertexts.txt"
BLOCK_SIZE = 16

def parse_ciphertexts():
    ciphertexts_file = open(CIPHERTEXTS_FILE, "r")
    ciphertexts = []
    current_ciphertext_b64 = ""
    for line in ciphertexts_file.readlines():
        if line == "\n":
            ciphertexts.append(b64d(current_ciphertext_b64))
            current_ciphertext_b64 = ""
            continue
        current_ciphertext_b64 += line[:-1]
    return ciphertexts

def get_chunks(l, n):
    n = max(1, n)
    return list((l[i:i+n] for i in range(0, len(l), n)))

freq = {}
freq[' '] = 700000000
freq['e'] = 390395169
freq['t'] = 282039486
freq['a'] = 248362256
freq['o'] = 235661502
freq['i'] = 214822972
freq['n'] = 214319386
freq['s'] = 196844692
freq['h'] = 193607737
freq['r'] = 184990759
freq['d'] = 134044565
freq['l'] = 125951672
freq['u'] = 88219598
freq['c'] = 79962026
freq['m'] = 79502870
freq['f'] = 72967175
freq['w'] = 69069021
freq['g'] = 61549736
freq['y'] = 59010696
freq['p'] = 55746578
freq['b'] = 47673928
freq['v'] = 30476191
freq['k'] = 22969448
freq['x'] = 5574077
freq['j'] = 4507165
freq['q'] = 3649838
freq['z'] = 2456495

def do_score(candidate: bytes) -> int:
    total_score = 0
    for byte in candidate:
        char_score = freq.get(chr(byte), 0)
        total_score += char_score
    return total_score

def find_xor_key(i, block):
    best_key = None
    best_score = 0
    best_cand = None
    for k in range(256):
        candidate = xor(block, bytes([k]))
        score = do_score(candidate)
        if score > best_score:
            best_score = score
            best_key = k
            best_cand = candidate
    return bytes([best_key])

def exploit():
    ciphertexts = parse_ciphertexts()
    print("Found {} ciphertexts".format(len(ciphertexts)))

    min_len = 99999999
    for ct in ciphertexts:
        if len(ct) < min_len:
            min_len = len(ct)
    num_blocks_to_solve = min_len % BLOCK_SIZE

    # Transpose into blocks of byte 0 of every block, byte 1 of every block, etc.
    # Each block will all encrypted with the same key.
    pseudo_blocks = [[b"" for _ in range(BLOCK_SIZE)] for _ in range(num_blocks_to_solve)]
    for ct in ciphertexts:
        blocks = get_chunks(ct, BLOCK_SIZE)
        for (block_i, block) in enumerate(blocks[:num_blocks_to_solve]):
            for (byte_i, byte) in enumerate(block):
                pseudo_blocks[block_i][byte_i] += bytes([byte])

    # Search though the blocks to find the best candidate key for each
    block_keys = []
    for (block_i, block) in enumerate(pseudo_blocks):
        key = b""
        for byte_block in block:
            key += find_xor_key(block_i, byte_block)
        block_keys.append(key)

    # Use the keys to decrypt each block
    print("PLAINTEXTS")
    for ct in ciphertexts:
        blocks = get_chunks(ct, BLOCK_SIZE)
        plaintext = b""
        for (i, key) in enumerate(block_keys):
            #  plaintext += xor(blocks[i], key)
            plaintext += xor(key, blocks[i])
        print(plaintext.decode("unicode_escape"))

exploit()
