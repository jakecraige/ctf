#!/usr/bin/env python3
from pwn import *

"""
I saved a flag in this service it but forgot my user and password...
Aparently it's unhackable, since they recently introduced security(TM).

http://chal.cybersecurityrumble.de:7717/

----
# POST /login gives custom cookie
admin/password:
    Set-Cookie: user=8004953c000000000000008c06776562617070948c04557365729493942981947d94288c08757365726e616d65948c0561646d696e948c0a7065726d697373696f6e948975622e-94e69369; Path=/
    HexDecode=...<.........webapp...User...)..}.(..username...admin..permission..ub.)
tpurp/tpurp:
    Set-Cookie: user=8004953c000000000000008c06776562617070948c04557365729493942981947d94288c08757365726e616d65948c057470757270948c0a7065726d697373696f6e948975622e-c0708178; Path=/
    HexDecode=...<.........webapp...User...)..}.(..username...tpurp..permission..ub.)

Replacing with tpurp cookie with admin results in:
    Cookie: user=8004953c000000000000008c06776562617070948c04557365729493942981947d94288c08757365726e616d65948c0561646d696e948c0a7065726d697373696f6e948975622e-c0708178; Path=/
Bad CRC-HMAC!

- CRC-HMAC is not really a real thing and is so small this is likely either breakable or brute forcible.
- If it's an HMAC construction than that makes it take a key as input that we don't know.
- POST /login also ignores password so you can log in as any user.

Another observation is that the formatting of the token looks like it might be
a pickle object. So the attack could be provide a malicous cookie payload and
generate a valid CRC-HMAC to get an RCE. Though the description seems to indicate
that we should log in to a user.

- CRC-HMAC is breakable


"""
