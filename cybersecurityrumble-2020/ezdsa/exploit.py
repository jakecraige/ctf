#!/usr/bin/env python3
from pwn import *
from binascii import hexlify, unhexlify
import hashlib
import ecdsa

N = ecdsa.SECP256k1.order
hashfunc = hashlib.sha1

def decode_sig(hex_sig):
    assert len(hex_sig) == 64
    r = int.from_bytes(hex_sig[:32], "big")
    s = int.from_bytes(hex_sig[32:], "big")
    return (r, s)


def get_sig(msg):
    io = remote("chal.cybersecurityrumble.de", 10101) # signer
    io.sendline(msg)
    io.recvuntil(msg+",")
    hex_sig = unhexlify(io.recv())
    log.info(msg + "," + hex_sig.hex())
    (r, s) = decode_sig(hex_sig)
    return (msg, r, s)

def mod_inv(num, mod):
    return pow(num, mod-2, mod)

def recover_privkey(sig1, sig2):
    (m1, r1, s1) = sig1
    (m2, r2, s2) = sig2

    z1 = int.from_bytes(hashfunc(m1.encode()).digest(), "big")
    z2 = int.from_bytes(hashfunc(m2.encode()).digest(), "big")

    k = (z1-z2) * pow(s1-s2, -1, N)
    priv = (s1*k - z1) * pow(r1, -1, N)
    priv %= N

    return ecdsa.SigningKey.from_secret_exponent(priv, curve=ecdsa.SECP256k1)


def test_recovery():
    """
    Local helper for verifying the recovery impl works properly.
    """
    def fixed_nonce(n): return b"1337"

    sk = ecdsa.SigningKey.generate(curve=ecdsa.SECP256k1)

    rs1 = sk.sign(b"a", entropy=fixed_nonce, hashfunc=hashfunc)
    (r1, s1) = decode_sig(rs1)
    sig1 = ("a", r1, s1)

    rs2 = sk.sign(b"b", entropy=fixed_nonce, hashfunc=hashfunc)
    (r2, s2) = decode_sig(rs2)
    sig2 = ("b", r2, s2)

    recov_sk = recover_privkey(sig1, sig2)
    print("Orig ", hex(sk.privkey.secret_multiplier))
    print("Recov", hex(recov_sk.privkey.secret_multiplier))

def sign_admin():
    # Generate two signatures with reused nonce to recovery private key
    sig1 = get_sig("a")
    sig2 = get_sig("b")
    sk = recover_privkey(sig1, sig2)
    log.success("Priv: " + hex(sk.privkey.secret_multiplier))

    # Submit signature for "admin" to get flag
    verifier = remote("chal.cybersecurityrumble.de", 10100)
    sig = sk.sign(b"admin")
    verifier.sendline(b"admin," + sig.hex().encode())
    log.success(verifier.recv().decode())

sign_admin()
