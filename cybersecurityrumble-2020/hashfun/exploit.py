FLAG = "CSR{testflag}"

def hashfun(msg):
    digest = []
    for i in range(len(msg) - 4):
        digest.append(ord(msg[i]) ^ ord(msg[i + 4]))
    return digest

"""
The hash algorithm accepts an input and returns a result that is 4 bytes less
than the input size. Each byte is XOR'd with the byte 4 ahead of it and appended
to the digest.

So hash(msg) =>
    digest[0] = msg[0] ^ msg[4] = a ^ e
    digest[1] = msg[1] ^ msg[5] = b ^ f
    digest[2] = msg[2] ^ msg[6] = c ^ g
    digest[3] = msg[3] ^ msg[7] = d ^ h
    digest[4] = msg[4] ^ msg[8]
    digest[5] = msg[5] ^ msg[9]

- We can assume the msg is ASCII since it's a flag
- We know the format is CSR{FLAG}
- If the result is 0, then it can be any value, we'll likely need to manually
  choose it once finding the others.
- For longer messages, we start to see an overlap in the XORs such that we can
  learn more information about the plaintext. For example:
    digset[1] ^ digest[5] = msg[1] ^ msg[5] ^ msg[5] ^ msg[9] = msg[1] ^ msg[9]


digest[0] = msg[0] ^ msg[4] = C ^ ?
digest[1] = msg[1] ^ msg[5] = S ^ ?
digest[2] = msg[2] ^ msg[6] = R ^ ?
digest[3] = msg[3] ^ msg[7] = { ^ ?
"""

def brute_ascii_byte(known, target):
    for poss in range(ord('A'), ord('~')):
        if known ^ poss == target:
            return poss
    return None

def reversehash(hsh):
    msg = [None for _ in range(len(hsh)+4)]
    msg[0] = ord('C')
    msg[1] = ord('S')
    msg[2] = ord('R')
    msg[3] = ord('{')
    for i in range(len(hsh)):
        v = brute_ascii_byte(msg[i], hsh[i])
        msg[i+4] = v
    return "".join([chr(c) for c in msg])

def tests():
    print("Flag:", FLAG)
    hsh = hashfun(FLAG)
    print("Hsh:", hsh)

    rev = reversehash(hsh)
    assert len(FLAG) == len(rev)
    print("Reversed:", rev)

    rehsh = hashfun(rev)
    print("Rehsh:", rehsh)
    assert rehsh == hsh

tests()

def solve():
    hsh = [10, 30, 31, 62, 27, 9, 4, 0, 1, 1, 4, 4, 7, 13, 8, 12, 21, 28, 12, 6, 60]
    print(reversehash(hsh))

solve()

